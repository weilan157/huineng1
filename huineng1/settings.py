"""
Django settings for huineng1 project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'fupmco6hq)n*9*v0356g3e6-ub^kd0y&8rpkysx-i+q$yh6i6l'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'xadmin.apps.XAdminConfig',  # 第三方后台管理
    'crispy_forms',
    # 必须安装的app
    #     'django.contrib.auth',
    # 第三方登录app
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # 下面是第三方账号相关的，比如我选了weibo和github
    'allauth.socialaccount.providers.weibo',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.baidu',

    # Added. haystack先添加，
    'haystack',  # 全局搜索
    
    'imagekit',  # 图片处理
    'ckeditor',  # 富文本编辑器
    'ckeditor_uploader',  # 富文本编辑器上传图片
    'apps.index.apps.IndexConfig',  # 首页app
    'apps.user.apps.UsersConfig',  # 用户app
    'apps.chatroom.apps.ChatroomConfig',  # 聊天室app
    # 'dwebsocket',  # websocket

    'mptt',  # 评论使用的数据库结构包
    'easy_comment',  # 评论
    'notifications',  # 通知使用的包
    'online_status',  # 通知
    'channels',  # Channels是针对Django项目的一个增强框架
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'huineng1.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',  # 图片上传
            ],
        },
    },
]

WSGI_APPLICATION = 'huineng1.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'django1',
        'USER': 'weilan',
        'PASSWORD': '123456',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

FILE_CHARSET = 'utf-8'

DEFAULT_CHARSET = 'utf-8'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

"""用户认证系统使用的模型类"""
AUTH_USER_MODEL = 'user.User'

"""邮箱配置"""
EMAIL_HOST = 'smtp.163.com'
EMAIL_PORT = 25
EMAIL_HOST_USER = 'weilan157@163.com'  # 你的邮箱账号
EMAIL_HOST_PASSWORD = 'ywq157520'  # 这里是邮箱提供给的授权码，不是个人密码
EMAIL_USE_TLS = True  # 保持不变
EMAIL_FROM = 'weilan157@163.com'  # 你的邮箱账号
DEFAULT_FROM_EMAIL = 'weilan157@163.com'


# 保存上传的图片目录
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
CKEDITOR_UPLOAD_PATH = 'upload/'  # 富文本内容图片路径


# ckeditor 富文本编辑器代码相关配置
CKEDITOR_CONFIGS = {
    # 将这份配置命名为 my_config
    'my_config': {
        # 使用简体中文
        'language': 'zh-cn',
        # 编辑器的宽高请根据你的页面自行设置
        'width': '850px',
        'height': '340px',
        'image_previewText': ' ',
        'tabSpaces': 4,
        'toolbar': 'Custom',
        # 添加按钮在这里
        'toolbar_Custom': [
            ['Font', 'FontSize', 'Styles', 'Bold', 'Italic', 'Underline', 'RemoveFormat'],
            ['NumberedList', 'BulletedList', 'HorizontalRule', '-', 'Subscript', 'Superscript'],
            ['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
            ['Blockquote', 'CodeSnippet', 'Find', 'Templates'],  # 区块，代码
            ['Image', 'Table', 'TextColor', 'BGColor'],  # 图片，表格，颜色'Link', 'Unlink'加链接和取消，能上下传文件，有风险！！！
            ['Source', 'Preview', 'Maximize'],  # 查看html源码, 预览，全屏
            # ['Preview', 'Maximize'],  # 全屏
        ],
        # 插件
        'extraPlugins': ','.join(['codesnippet', 'uploadimage', 'widget', 'lineutils', ]),
    },
    'default': {
        'width': 'auto',
        'height': '150px',
        'image_previewText': ' ',
        'tabSpaces': 4,
        'toolbar': 'Custom',
        'toolbar_Custom': [
            ['Bold', 'Italic', 'Underline', 'Format', 'RemoveFormat'],
            ['NumberedList', 'BulletedList'],
            ['Blockquote', 'Image', 'CodeSnippet'],
            # ['Image', 'Link', 'Unlink']
        ],
        'extraPlugins': ','.join(['codesnippet', 'uploadimage', 'prism', 'widget', 'lineutils', ]),
    }
}

ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3  # ：邮件确认邮件的截止日期(天数)
ACCOUNT_EMAIL_VERIFICATION = "optional"  # ：注册中邮件验证方法:“强制（mandatory）”,“可选（optional）”或“否（none）”之一
ACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 180  # ：邮件发送后的冷却时间(以秒为单位)
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5  # ：登录尝试失败的次数
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 300  # ：从上次失败的登录尝试，用户被禁止尝试登录的持续时间
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = False  # ：更改为True，用户一旦确认他们的电子邮件地址，就会自动登录
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = False  # ：更改或设置密码后是否自动退出
ACCOUNT_LOGIN_ON_PASSWORD_RESET = False  # )：更改为True，用户将在重置密码后自动登录
ACCOUNT_SESSION_REMEMBER = None  # ：控制会话的生命周期，可选项还有:False,True
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = False  # :用户注册时是否需要输入邮箱两遍
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True  #: 用户注册时是否需要用户输入两遍密码
ACCOUNT_USERNAME_BLACKLIST = []  # :用户不能使用的用户名列表
ACCOUNT_UNIQUE_EMAIL = True  # ： 加强电子邮件地址的唯一性
ACCOUNT_USERNAME_MIN_LENGTH = 1  # ：用户名允许的最小长度的整数
SOCIALACCOUNT_AUTO_SIGNUP = True  # ：使用从社会帐户提供者检索的字段(如用户名、邮件)来绕过注册表单
LOGIN_REDIRECT_URL = "/index/index/"  # 设置登录后跳转链接
ACCOUNT_LOGOUT_REDIRECT_URL = '/index/index/'  # 设置退出登录后跳转链接

# django-allauth相关设置
AUTHENTICATION_BACKENDS = (
    # django admin所使用的用户登录与django-allauth无关
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)

# 前面我们app里添加了django.contrib.sites,需要设置SITE_ID
SITE_ID = 2  # 很重要，在admin的站点里设置
ACCOUNT_AUTHENTICATION_METHOD = "username_email"  # ：指定要使用的登录方法（用户名、电子邮件地址或两者之一）
ACCOUNT_EMAIL_REQUIRED = True

# 登录url地址
LOGIN_URL = '/accounts/login/'

# 配置表单插件使用的样式
CRISPY_TEMPLATE_PACK = 'bootstrap4'

SEND_NOTIFICATION_EMAIL = False  # 设置是否接收评论通知邮件，默认False 不接收
COMMENT_PAGINATE_BY = 100  # 设置评论分页，比如10，就是每10条评论一页，如果设置为None，则不分页，默认10

# 配置搜索引擎后端
HAYSTACK_CONNECTIONS = {
  'default': {
      # 使用whoosh引擎：提示，如果不需要使用jieba框架实现分词，就使用whoosh_backend
      'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',
      # 索引文件路径
      'PATH': os.path.join(BASE_DIR, 'whoosh_index'),  # 在项目目录下创建文件夹 whoosh_index
  }
}
# 当添加、修改、删除数据时，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

# haystack自动分页默认每页显示20个  可以根据自己的需求设置显示个数
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 20

# 支付宝支付-配置
ALIPAY_APPID = "2016092900622215"  # 沙箱环境appid
ALIPAY_URL = "https://openapi.alipaydev.com/gateway.do"  # 沙箱环境
ALIPAY_DEBUG = True  # DEBUG模式

# 应用私钥文件路径
APP_PRIVATE_KEY_PATH = os.path.join(BASE_DIR, 'apps/index/app_private_key.pem')
# 支付宝公钥文件路径
ALIPAY_PUBLIC_KEY_PATH = os.path.join(BASE_DIR, 'apps/index/alipay_pubilc_key.pem')

# 为所有的URL提供websocket，如果只是单独的视图需要可以不选
# MIDDLEWARE_CLASSES = ['dwebsocket.middleware.WebSocketMiddleware']
# WEBSOCKET_ACCEPT_ALL = True   # 可以允许每一个单独的视图实用websockets

# 指定ASGI的路由地址
ASGI_APPLICATION = 'huineng1.routing.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}
